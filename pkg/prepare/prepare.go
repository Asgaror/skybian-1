package prepare

import (
	"encoding/json"
	"os"
	"time"

	"github.com/SkycoinProject/dmsg/cipher"
	"github.com/SkycoinProject/skybian/pkg/boot"
	"github.com/SkycoinProject/skywire-mainnet/pkg/app/appcommon"
	"github.com/SkycoinProject/skywire-mainnet/pkg/hypervisor"
	"github.com/SkycoinProject/skywire-mainnet/pkg/restart"
	"github.com/SkycoinProject/skywire-mainnet/pkg/routing"
	"github.com/SkycoinProject/skywire-mainnet/pkg/skyenv"
	"github.com/SkycoinProject/skywire-mainnet/pkg/visor"
)

// Config file paths.
const (
	visorConfPath      = "/etc/skywire-visor.json"
	hypervisorConfPath = "/etc/skywire-hypervisor.json"
)

func Prepare(bp boot.Params) error {

	// generate config struct
	type genFn func(bp boot.Params) (conf interface{}, err error)

	// ensure config file of 'name' exists
	// if not, write config generated by 'genConfig'
	ensureExists := func(name string, genConfig genFn) error {
		// Nothing needs to be done if file exists.
		if _, err := os.Stat(name); err == nil {
			return nil
		}
		// Create file.
		f, err := os.Create(name)
		if err != nil {
			return err
		}
		defer func() { _ = f.Close() }()
		// Generate and write config to file.
		conf, err := genConfig(bp)
		if err != nil {
			return err
		}
		return json.NewEncoder(f).Encode(conf)
	}

	// config location and contents depend on mode
	switch bp.Mode {
	case boot.HypervisorMode:
		return ensureExists(hypervisorConfPath, generateHypervisorConfig)
	case boot.VisorMode:
		return ensureExists(visorConfPath, generateVisorConfig)
	default:
		return boot.ErrInvalidMode
	}
}

func genKeyPair(bp boot.Params) (pk cipher.PubKey, sk cipher.SecKey, err error) {
	if sk = bp.LocalSK; sk.Null() {
		pk, sk = cipher.GenerateKeyPair()
	} else {
		pk, err = sk.PubKey()
	}
	return
}

func generateVisorConfig(bp boot.Params) (interface{}, error) {
	skysocksArgs := func() (args []string) {
		if bp.SkysocksPasscode != "" {
			args = []string{"-passcode", bp.SkysocksPasscode}
		}
		return args
	}
	hypervisors := func() (hvs []visor.HypervisorConfig) {
		for _, pk := range bp.HypervisorPKs {
			hvs = append(hvs, visor.HypervisorConfig{PubKey: pk})
		}
		return hvs
	}
	pk, sk, err := genKeyPair(bp)
	if err != nil {
		return nil, err
	}
	conf := new(visor.Config)
	conf.Version = "1.0"
	conf.KeyPair.PubKey = pk
	conf.KeyPair.SecKey = sk
	conf.STCP, _ = visor.DefaultSTCPConfig()
	conf.Dmsg = visor.DefaultDmsgConfig()
	conf.DmsgPty.Port = skyenv.DmsgPtyPort
	conf.DmsgPty.AuthFile = "/var/skywire-visor/dsmgpty/whitelist.json"
	conf.DmsgPty.CLINet = "unix"
	conf.DmsgPty.CLIAddr = "/run/skywire-visor/dmsgpty/cli.sock"
	conf.Transport.Discovery = skyenv.DefaultTpDiscAddr
	conf.Transport.LogStore.Type = visor.LogStoreFile
	conf.Transport.LogStore.Location = "/var/skywire-visor/transports"
	conf.Routing = visor.DefaultRoutingConfig()
	conf.UptimeTracker.Addr = skyenv.DefaultUptimeTrackerAddr
	conf.Hypervisors = hypervisors()
	conf.LogLevel = "info"
	conf.ShutdownTimeout = visor.Duration(10 * time.Second)
	conf.Interfaces.RPCAddress = "localhost:3435"
	conf.AppServerAddr = appcommon.DefaultServerAddr
	conf.RestartCheckDelay = restart.DefaultCheckDelay.String()
	conf.AppsPath = "/usr/bin/apps"
	conf.LocalPath = "/var/skywire-visor/apps"
	conf.Apps = []visor.AppConfig{
		{
			App:       skyenv.SkychatName,
			AutoStart: true,
			Port:      routing.Port(skyenv.SkychatPort),
			Args:      []string{"-addr", skyenv.SkychatAddr},
		},
		{
			App:       skyenv.SkysocksName,
			AutoStart: true,
			Port:      routing.Port(skyenv.SkysocksPort),
			Args:      skysocksArgs(),
		},
		{
			App: skyenv.SkysocksClientName,
			AutoStart: false,
			Port: routing.Port(skyenv.SkysocksClientPort),
			Args: []string{"-addr", skyenv.SkysocksClientAddr},
		},
	}
	return conf, nil
}

func generateHypervisorConfig(bp boot.Params) (interface{}, error) {
	pk, sk, err := genKeyPair(bp)
	if err != nil {
		return nil, err
	}
	conf := new(hypervisor.Config)
	conf.PK = pk
	conf.SK = sk
	conf.DBPath = "/var/skywire-hypervisor/users.db"
	conf.EnableAuth = true
	conf.Cookies.BlockKey = cipher.RandByte(32)
	conf.Cookies.HashKey = cipher.RandByte(64)
	conf.Cookies.FillDefaults()
	conf.DmsgDiscovery = skyenv.DefaultDmsgDiscAddr
	conf.DmsgPort = skyenv.DmsgHypervisorPort
	conf.HTTPAddr = ":8000"
	conf.EnableTLS = true
	conf.TLSCertFile = "/etc/skywire-hypervisor/cert.pem"
	conf.TLSKeyFile = "/etc/skywire-hypervisor/key.pem"
	err = genCert(conf.TLSCertFile, conf.TLSKeyFile)
	return conf, err
}
