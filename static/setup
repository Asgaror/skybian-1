#!/bin/bash
# Crafted by Skycoin/Simelo team
# Modified by @evanlinjin

## This script configures the Network Parameters for Skybian OS during boot
#	time using data stored in the [free space of the] bootloader or from a
#	default configuration file.

## The first 16MB (address 0x0-0x1000000) of the multimedia-card (MMC) is
#	reserved for the bootloader in 512 byte sectors that's blocks 0 to 32768.
#
#	Actual bootloader data is split on some regions in that 16MB space, but
#   there are white spaces in there that we will use.
#
#   Network Paramaters are stored on the 12MB mark, exact address is 0xC00000
#   aka byte 12582912, but we use 256 byte block to reach it so it's on the 
#   block number 49152.
#
#	The following variables describe where to start looking for existing
#   Network Parameters, again in 256 bytes blocks
DATASTART=49152
DATASIZE=256

SETUP_CONF="/etc/skywire/setup.conf"    # Location for startup conf.
VISOR_CONF="/etc/skywire/visor-config.json" # Location for skywire visor conf.

## Extract config from MMC; forward-to $SETUP_CONF; else use default
function extract_config() {
	# Read one 256 byte block after skiping $DATASIZE blocks
	dd if=/dev/mmcblk0 of=/tmp/extracted bs=$DATASIZE count=1 skip=$DATASTART

	# Clean read data by printing strings of printable characters from output
	strings /tmp/extracted > /tmp/clean

	# If /tmp/clean contains strings: test fields in $section
	if [ -s /tmp/clean ] ; then
		data=$(cat /tmp/clean)
		local data

		local flag=""		# $flag is set if a field in $section is missing;
							#	set by the following loop:

		for section in IP GW DNS HV_PKS ; do
			test=$(cat "${data}" | grep $section)
			local test

			# If a field in $section is missing a string...
			if [ -z "$test" ] ; then
				flag="true"	# set the flag
				return
			fi
		done

		# If $flag is blank: data is good; copy/overwrite-system-default
		if [ -z "$flag" ] ; then
			cp -f /tmp/clean "$SETUP_CONF"
		fi
	fi
}
extract_config

## If Network Parameters are not found in bootloader: load default config from:
# shellcheck source=./setup.conf
. "$SETUP_CONF"

## Check if Network Parameters match existing configuration.
#	If detected parameters match configured: true
#	If network is not configured (or has different IP): false
function check_net() {
    skynet=$(nmcli con show | grep skynet)
    local skynet

	# If connection "skynet" exists:
    if [ -n "$skynet" ] ; then				# assign it's IP to:
        local skyip=$(nmcli con show skynet | grep IP4.ADDRESS | `
			`awk '{ print $2 }')

	    # Test if it matches $IP from extract_config()
        if [ "$skyip" == "$IP/24" ] ; then
            echo 1	# true
        else
            echo 0	# false
        fi
    else	# No "Skynet" connection
        echo 0		# false

        # Erase existing configuration in Network Manager for eth0 interface
        nmcli con delete "Wired connection 1" &> /dev/null
    fi
}

## Check if network configuration is ok:
if [ "$(check_net)" == "1" ] ; then
	echo "Network configuration ok."
else
	echo "Not configured or different; fixing..."

	# Force configuration removal in case it exists but doesn't match
	nmcli con delete skynet &> /dev/null

	# Setting up using parameters from extract_config()
	nmcli con add con-name skynet ifname eth0 type ethernet ip4 $IP/24 gw4 $GW
	nmcli con mod skynet ipv4.dns "$DNS"
fi

# Prepare env.
function prepare_env() {
    echo "Preparing tools to mod config..."
    if ! TEMP_FILE=$(mktemp) ; then
        echo "Failed to create temp dir."
        exit 1
    fi
    if ! JQ=$(command -v jq) ; then
        echo "Cannot find 'jq', aborting."
        exit 1
    fi
    echo "TEMP_FILE=${TEMP_FILE}"
    echo "JQ=${JQ}"
}
prepare_env

# For modifying config file.
function jq_cfg() {
    echo "jq_cfg() $*"
    # shellcheck disable=SC2086
    $JQ $* "${VISOR_CONF}" > "${TEMP_FILE}" && mv "${TEMP_FILE}" "${VISOR_CONF}"
}

# Set trusted Hypervisor PKs if set in 'setup.conf'.
function set_hypervisors() {
	if [[ -n ${HV_PKS} ]] ; then
		# shellcheck disable=SC2016
		for PK in "${HV_PKS[@]}" ; do jq_cfg --arg pk "${PK}" '.hypervisors+=[$pk]' ; done
		jq_cfg '.hypervisors|=unique' # ensure PKs are all unique
	fi
}

# Only generate config if not exist.
if [[ ! -f "${VISOR_CONF}" ]] ; then
    echo "Skywire config file does not yet exist in ${VISOR_CONF}."

    echo "Generating base config in '${VISOR_CONF}'..."
    /usr/bin/skywire-cli visor gen-config --output="${VISOR_CONF}" --type="LOCAL" || exit 1

	jq_cfg '.transport.log_store.location="/var/log/skywire/transport"'
	jq_cfg '.dmsg_pty.authorization_file="/var/skywire/dsmgpty/whitelist.json"'
	jq_cfg '.dmsg_pty.cli_address="/run/skywire/dmsgpty.sock"'
	jq_cfg '.app_server_sock_file="/run/skywire/appsrv.sock"'
	jq_cfg '.local_path="/var/skywire/local"'
	jq_cfg '.apps_path="/usr/bin/skywire/apps"'
fi

# Anyways ensure hypervisors are set.
set_hypervisors

# Clean.
echo "Cleaning up..."
rm -rf "${TEMP_FILE}"

echo "Done!"
